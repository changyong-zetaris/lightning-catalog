import org.gradle.process.ExecResult

rootProject.name = 'lightning-metastore'
include 'spark'
project(':spark').name = 'lightning-spark'


if (null != System.getProperty("allVersions")) {
  System.setProperty("flinkVersions", System.getProperty("knownFlinkVersions"))
  System.setProperty("sparkVersions", System.getProperty("knownSparkVersions"))
  System.setProperty("hiveVersions", System.getProperty("knownHiveVersions"))
}

List<String> knownFlinkVersions = System.getProperty("knownFlinkVersions").split(",")
String flinkVersionsString = System.getProperty("flinkVersions") != null ? System.getProperty("flinkVersions") : System.getProperty("defaultFlinkVersions")
List<String> flinkVersions = flinkVersionsString != null && !flinkVersionsString.isEmpty() ? flinkVersionsString.split(",") : []

if (!knownFlinkVersions.containsAll(flinkVersions)) {
  throw new GradleException("Found unsupported Flink versions: " + (flinkVersions - knownFlinkVersions))
}

List<String> knownHiveVersions = System.getProperty("knownHiveVersions").split(",")
String hiveVersionsString = System.getProperty("hiveVersions") != null ? System.getProperty("hiveVersions") : System.getProperty("defaultHiveVersions")
List<String> hiveVersions = hiveVersionsString != null && !hiveVersionsString.isEmpty() ? hiveVersionsString.split(",") : []

if (!knownHiveVersions.containsAll(hiveVersions)) {
  throw new GradleException("Found unsupported Hive versions: " + (hiveVersions - knownHiveVersions))
}

List<String> knownSparkVersions = System.getProperty("knownSparkVersions").split(",")
String sparkVersionsString = System.getProperty("sparkVersions") != null ? System.getProperty("sparkVersions") : System.getProperty("defaultSparkMajorVersion")
List<String> sparkVersions = sparkVersionsString != null && !sparkVersionsString.isEmpty() ? sparkVersionsString.split(",") : []

if (!knownSparkVersions.containsAll(sparkVersions)) {
  throw new GradleException("Found unsupported Spark versions: " + (sparkVersions - knownSparkVersions))
}

List<String> knownScalaVersions = System.getProperty("knownScalaVersions").split(",")
String scalaVersion = System.getProperty("scalaVersion") != null ? System.getProperty("scalaVersion") : System.getProperty("defaultScalaVersion")

if (!knownScalaVersions.contains(scalaVersion)) {
  throw new GradleException("Found unsupported Scala version: " + scalaVersion)
}

def findSparkSubmitPath = {
    // First, check if the SPARK_HOME environment variable is set
    def sparkHome = System.getenv("SPARK_HOME")
    if (sparkHome) {
        return "$sparkHome/bin/spark-submit"
    }

    // Check if it's installed via Homebrew
    def homebrewPath = "/opt/homebrew/bin/spark-submit"
    if (new File(homebrewPath).exists()) {
        return homebrewPath
    }

    // Check the default path (for manually downloaded Spark)
    def defaultPath = "/usr/local/spark/bin/spark-submit"
    if (new File(defaultPath).exists()) {
        return defaultPath
    }

    // If not found, return null
    return null
}

def sparkSubmitPath = findSparkSubmitPath()

if (sparkSubmitPath == null) {
    throw new GradleException("Spark submit binary could not be found. Please set SPARK_HOME or ensure Spark is installed.")
}

// Now you can use sparkHome and sparkVersion dynamically
ext {
    sparkVersion = 3.5
    if(sparkVersions.contains("3.3")) sparkVersion = 3.3
    if(sparkVersions.contains("3.4")) sparkVersion = 3.4
    scalaVersion = scalaVersion
    sparkHome = sparkSubmitPath
}

// Create versions.txt
def versionFile = new File("${rootDir}/doc/versions.txt")
versionFile.text = "SPARK_VERSION=${sparkVersion}\nSCALA_VERSION=${scalaVersion}\nSPARK_HOME=${sparkHome}"
println "Versions written to ${versionFile.path}"

println "Spark Version is set to: ${sparkVersion}"
println "Scala Version is set to: ${scalaVersion}"
println "Spark Home: ${sparkHome}"

include ":lightning-spark:spark-common_${scalaVersion}"
project(":lightning-spark:spark-common_${scalaVersion}").projectDir = file("spark/spark-common")
project(":lightning-spark:spark-common_${scalaVersion}").name = "lightning-spark-common_${scalaVersion}"

if (sparkVersions.contains("3.3")) {
  include ":lightning-spark:spark-extensions-3.3_${scalaVersion}"
  include ":lightning-spark:spark-runtime-3.3_${scalaVersion}"
  project(":lightning-spark:spark-extensions-3.3_${scalaVersion}").projectDir = file('spark/v3.3/spark-extensions')
  project(":lightning-spark:spark-extensions-3.3_${scalaVersion}").name = "lightning-spark-extensions-3.3_${scalaVersion}"
  project(":lightning-spark:spark-runtime-3.3_${scalaVersion}").projectDir = file('spark/v3.3/spark-runtime')
  project(":lightning-spark:spark-runtime-3.3_${scalaVersion}").name = "lightning-spark-runtime-3.3_${scalaVersion}"
}

if (sparkVersions.contains("3.4")) {
  include ":lightning-spark:spark-extensions-3.4_${scalaVersion}"
  include ":lightning-spark:spark-runtime-3.4_${scalaVersion}"
  project(":lightning-spark:spark-extensions-3.4_${scalaVersion}").projectDir = file('spark/v3.4/spark-extensions')
  project(":lightning-spark:spark-extensions-3.4_${scalaVersion}").name = "lightning-spark-extensions-3.4_${scalaVersion}"
  project(":lightning-spark:spark-runtime-3.4_${scalaVersion}").projectDir = file('spark/v3.4/spark-runtime')
  project(":lightning-spark:spark-runtime-3.4_${scalaVersion}").name = "lightning-spark-runtime-3.4_${scalaVersion}"
}

if (sparkVersions.contains("3.5")) {
  include ":lightning-spark:spark-extensions-3.5_${scalaVersion}"
  include ":lightning-spark:spark-runtime-3.5_${scalaVersion}"
  project(":lightning-spark:spark-extensions-3.5_${scalaVersion}").projectDir = file('spark/v3.5/spark-extensions')
  project(":lightning-spark:spark-extensions-3.5_${scalaVersion}").name = "lightning-spark-extensions-3.5_${scalaVersion}"
  project(":lightning-spark:spark-runtime-3.5_${scalaVersion}").projectDir = file('spark/v3.5/spark-runtime')
  project(":lightning-spark:spark-runtime-3.5_${scalaVersion}").name = "lightning-spark-runtime-3.5_${scalaVersion}"
}

include ":lightning-spark:spark-test_${scalaVersion}"
project(":lightning-spark:spark-test_${scalaVersion}").projectDir = file("spark/spark-test")
project(":lightning-spark:spark-test_${scalaVersion}").name = "lightning-spark-test_${scalaVersion}"
