import org.gradle.process.ExecResult

rootProject.name = 'lightning-metastore'
include 'spark'
project(':spark').name = 'lightning-spark'


if (null != System.getProperty("allVersions")) {
  System.setProperty("flinkVersions", System.getProperty("knownFlinkVersions"))
  System.setProperty("sparkVersions", System.getProperty("knownSparkVersions"))
  System.setProperty("hiveVersions", System.getProperty("knownHiveVersions"))
}

List<String> knownFlinkVersions = System.getProperty("knownFlinkVersions").split(",")
String flinkVersionsString = System.getProperty("flinkVersions") != null ? System.getProperty("flinkVersions") : System.getProperty("defaultFlinkVersions")
List<String> flinkVersions = flinkVersionsString != null && !flinkVersionsString.isEmpty() ? flinkVersionsString.split(",") : []

if (!knownFlinkVersions.containsAll(flinkVersions)) {
  throw new GradleException("Found unsupported Flink versions: " + (flinkVersions - knownFlinkVersions))
}

List<String> knownHiveVersions = System.getProperty("knownHiveVersions").split(",")
String hiveVersionsString = System.getProperty("hiveVersions") != null ? System.getProperty("hiveVersions") : System.getProperty("defaultHiveVersions")
List<String> hiveVersions = hiveVersionsString != null && !hiveVersionsString.isEmpty() ? hiveVersionsString.split(",") : []

if (!knownHiveVersions.containsAll(hiveVersions)) {
  throw new GradleException("Found unsupported Hive versions: " + (hiveVersions - knownHiveVersions))
}

List<String> knownSparkVersions = System.getProperty("knownSparkVersions").split(",")
String sparkVersionsString = System.getProperty("sparkVersions") != null ? System.getProperty("sparkVersions") : System.getProperty("defaultSparkMajorVersion")
List<String> sparkVersions = sparkVersionsString != null && !sparkVersionsString.isEmpty() ? sparkVersionsString.split(",") : []

if (!knownSparkVersions.containsAll(sparkVersions)) {
  throw new GradleException("Found unsupported Spark versions: " + (sparkVersions - knownSparkVersions))
}

List<String> knownScalaVersions = System.getProperty("knownScalaVersions").split(",")
String scalaVersion = System.getProperty("scalaVersion") != null ? System.getProperty("scalaVersion") : System.getProperty("defaultScalaVersion")

if (!knownScalaVersions.contains(scalaVersion)) {
  throw new GradleException("Found unsupported Scala version: " + scalaVersion)
}

def detectSparkPathAndVersion() {
    try {
        // Check if `spark-submit` is available in the PATH
        def sparkHome = System.getenv("SPARK_HOME")
        if (!sparkHome) {
            def sparkSubmitPath = ['which', 'spark-submit'].execute().text.trim()
            if (sparkSubmitPath) {
                println "Spark submit found at: $sparkSubmitPath"
                
                // Get Spark version using `spark-submit --version`
                def sparkVersionOutput = ['spark-submit', '--version'].execute().text
                def sparkVersionMatcher = sparkVersionOutput =~ /version (\d+\.\d+\.\d+)/
                if (sparkVersionMatcher.find()) {
                    def detectedVersion = sparkVersionMatcher.group(1)
                    println "Detected Spark version: $detectedVersion"
                    sparkHome = sparkSubmitPath.replace('/bin/spark-submit', '')
                    return [sparkHome, detectedVersion]
                } else {
                    throw new GradleException("Could not detect Spark version.")
                }
            } else {
                throw new GradleException("spark-submit not found in system path.")
            }
        } else {
            println "Using SPARK_HOME from environment: $sparkHome"
            return [sparkHome, "Unknown Version"]
        }
    } catch (Exception e) {
        throw new GradleException("Failed to detect Spark version or path: ${e.message}")
    }
}

def (sparkHome, sparkVersion) = detectSparkPathAndVersion()
println "Spark Version: $sparkVersion"
println "Spark Home: $sparkHome"

// Now you can use sparkHome and sparkVersion dynamically
ext {
    sparkVersion = sparkVersion
    scalaVersion = "2.12" // Default or detected Scala version
}

ext {
    // Spark version fetched from system properties or default
    sparkVersion = "3.5"
    if (sparkVersions.contains("3.3")) {sparkVersion = "3.3"}
    if (sparkVersions.contains("3.4")) {sparkVersion = "3.4"}
    scalaVersion = scalaVersion
}

println "Spark Version is set to: ${sparkVersion}"
println "Scala Version is set to: ${scalaVersion}"

include ":lightning-spark:spark-common_${scalaVersion}"
project(":lightning-spark:spark-common_${scalaVersion}").projectDir = file("spark/spark-common")
project(":lightning-spark:spark-common_${scalaVersion}").name = "lightning-spark-common_${scalaVersion}"

if (sparkVersions.contains("3.3")) {
  include ":lightning-spark:spark-extensions-3.3_${scalaVersion}"
  include ":lightning-spark:spark-runtime-3.3_${scalaVersion}"
  project(":lightning-spark:spark-extensions-3.3_${scalaVersion}").projectDir = file('spark/v3.3/spark-extensions')
  project(":lightning-spark:spark-extensions-3.3_${scalaVersion}").name = "lightning-spark-extensions-3.3_${scalaVersion}"
  project(":lightning-spark:spark-runtime-3.3_${scalaVersion}").projectDir = file('spark/v3.3/spark-runtime')
  project(":lightning-spark:spark-runtime-3.3_${scalaVersion}").name = "lightning-spark-runtime-3.3_${scalaVersion}"
}

if (sparkVersions.contains("3.4")) {
  include ":lightning-spark:spark-extensions-3.4_${scalaVersion}"
  include ":lightning-spark:spark-runtime-3.4_${scalaVersion}"
  project(":lightning-spark:spark-extensions-3.4_${scalaVersion}").projectDir = file('spark/v3.4/spark-extensions')
  project(":lightning-spark:spark-extensions-3.4_${scalaVersion}").name = "lightning-spark-extensions-3.4_${scalaVersion}"
  project(":lightning-spark:spark-runtime-3.4_${scalaVersion}").projectDir = file('spark/v3.4/spark-runtime')
  project(":lightning-spark:spark-runtime-3.4_${scalaVersion}").name = "lightning-spark-runtime-3.4_${scalaVersion}"
}

if (sparkVersions.contains("3.5")) {
  include ":lightning-spark:spark-extensions-3.5_${scalaVersion}"
  include ":lightning-spark:spark-runtime-3.5_${scalaVersion}"
  project(":lightning-spark:spark-extensions-3.5_${scalaVersion}").projectDir = file('spark/v3.5/spark-extensions')
  project(":lightning-spark:spark-extensions-3.5_${scalaVersion}").name = "lightning-spark-extensions-3.5_${scalaVersion}"
  project(":lightning-spark:spark-runtime-3.5_${scalaVersion}").projectDir = file('spark/v3.5/spark-runtime')
  project(":lightning-spark:spark-runtime-3.5_${scalaVersion}").name = "lightning-spark-runtime-3.5_${scalaVersion}"
}

include ":lightning-spark:spark-test_${scalaVersion}"
project(":lightning-spark:spark-test_${scalaVersion}").projectDir = file("spark/spark-test")
project(":lightning-spark:spark-test_${scalaVersion}").name = "lightning-spark-test_${scalaVersion}"
