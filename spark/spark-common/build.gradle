/*
 *
 *  * Copyright 2023 ZETARIS Pty Ltd
 *  *
 *  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 *  * associated documentation files (the "Software"), to deal in the Software without restriction,
 *  * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 *  * subject to the following conditions:
 *  *
 *  * The above copyright notice and this permission notice shall be included in all copies
 *  * or substantial portions of the Software.
 *  *
 *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *  * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 *  * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

String sparkVersion = System.getProperty("defaultSparkVersion")
String scalaVersion = System.getProperty("scalaVersion") != null ? System.getProperty("scalaVersion") : System.getProperty("defaultScalaVersion")

project(":lightning-spark:lightning-spark-common_${scalaVersion}") {
    apply plugin: 'java-library'
    apply plugin: 'scala'
    apply plugin: 'antlr'

    configurations {
        all {
            resolutionStrategy {
                force 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
            }
            exclude group: 'commons-logging', module: 'commons-logging'
            exclude group: 'javax.jdo', module: 'jdo-api'
            exclude group: 'org.apache.hive', module: 'hive-storage-api'
            exclude group: 'org.apache.hive', module: 'hive-common'
            exclude group: 'jakarta.servlet', module: 'jakarta.servlet-api'
        }

        /*
         The Gradle Antlr plugin erroneously adds both antlr-build and runtime dependencies to the runtime path. This
         bug https://github.com/gradle/gradle/issues/820 exists because older versions of Antlr do not have separate
         runtime and implementation dependencies and they do not want to break backwards compatibility. So to only end up with
         the runtime dependency on the runtime classpath we remove the dependencies added by the plugin here. Then add
         the runtime dependency back to only the runtime configuration manually.
        */
        implementation {
            extendsFrom = extendsFrom.findAll { it != configurations.antlr }
        }

        repositories {
                mavenCentral()
                mavenLocal()
            }
    }

    dependencies {
        implementation("org.scala-lang.modules:scala-collection-compat_${scalaVersion}")
        implementation("com.drewnoakes:metadata-extractor:2.19.0")
        implementation("org.apache.pdfbox:pdfbox:3.0.2")
        implementation("net.coobird:thumbnailator:0.4.20")
        implementation("com.drewnoakes:metadata-extractor:2.19.0")
        implementation("org.bytedeco:javacv:1.5.10")
        implementation("org.bytedeco:javacpp:1.5.10")
        implementation("org.bytedeco:ffmpeg-platform:6.1.1-1.5.10")
        implementation("org.bytedeco:opencv-platform:4.9.0-1.5.10")

        compileOnly "org.scala-lang:scala-library:${scalaVersion}"
        compileOnly("org.apache.spark:spark-hive_${scalaVersion}:${sparkVersion}")

        compileOnly("org.apache.spark:spark-avro_${scalaVersion}:${sparkVersion}")

        testImplementation "junit:junit:4.13.2"
        testImplementation "org.scalatest:scalatest_${scalaVersion}:3.2.15"
        testImplementation "org.scalatest:scalatest-matchers-core_${scalaVersion}:3.2.15"
        testImplementation "org.scalatestplus:junit-4-13_${scalaVersion}:3.2.2.0"

        testImplementation "org.apache.avro:avro"
        testImplementation "org.apache.orc:orc-core"
        testImplementation "org.apache.parquet:parquet-hadoop"
        testImplementation "com.h2database:h2:2.1.214"
        testImplementation "net.snowflake:snowflake-jdbc:3.14.4"
        testImplementation "com.amazon.redshift:redshift-jdbc42:2.1.0.25"
        runtimeOnly "org.antlr:antlr4-runtime:4.8"
        antlr "org.antlr:antlr4:4.8"

        // Jersey and Jetty dependencies
        implementation 'org.glassfish.jersey.core:jersey-server:2.35'
        implementation 'org.glassfish.jersey.containers:jersey-container-jetty-http:2.35'
        implementation 'org.glassfish.jersey.inject:jersey-hk2:2.35'
        implementation 'org.eclipse.jetty:jetty-server:9.4.43.v20210629'
        implementation 'org.eclipse.jetty:jetty-servlet:9.4.43.v20210629'

    }

    generateGrammarSource {
        maxHeapSize = "2048m"
        arguments += ['-visitor']
        //arguments += ['-visitor', '-package', 'org.apache.spark.sql.catalyst.parser.extensions']
    }
}

